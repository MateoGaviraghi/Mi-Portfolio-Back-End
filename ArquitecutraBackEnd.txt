📦 Arquitectura Backend - Portfolio API
🏗️ Estructura del Proyecto
portfolio-backend/
├── src/
│   ├── auth/
│   │   ├── auth.controller.ts
│   │   ├── auth.service.ts
│   │   ├── auth.module.ts
│   │   ├── strategies/
│   │   │   └── jwt.strategy.ts
│   │   ├── guards/
│   │   │   ├── jwt-auth.guard.ts
│   │   │   └── roles.guard.ts
│   │   └── dto/
│   │       ├── login.dto.ts
│   │       └── register.dto.ts
│   │
│   ├── users/
│   │   ├── users.controller.ts
│   │   ├── users.service.ts
│   │   ├── users.module.ts
│   │   ├── schemas/
│   │   │   └── user.schema.ts
│   │   └── dto/
│   │       ├── create-user.dto.ts
│   │       └── update-user.dto.ts
│   │
│   ├── projects/
│   │   ├── projects.controller.ts
│   │   ├── projects.service.ts
│   │   ├── projects.module.ts
│   │   ├── schemas/
│   │   │   └── project.schema.ts
│   │   └── dto/
│   │       ├── create-project.dto.ts
│   │       └── update-project.dto.ts
│   │
│   ├── reviews/
│   │   ├── reviews.controller.ts
│   │   ├── reviews.service.ts
│   │   ├── reviews.module.ts
│   │   ├── schemas/
│   │   │   └── review.schema.ts
│   │   └── dto/
│   │       └── create-review.dto.ts
│   │
│   ├── skills/
│   │   ├── skills.controller.ts
│   │   ├── skills.service.ts
│   │   ├── skills.module.ts
│   │   └── schemas/
│   │       └── skill.schema.ts
│   │
│   ├── analytics/
│   │   ├── analytics.controller.ts
│   │   ├── analytics.service.ts
│   │   ├── analytics.module.ts
│   │   └── schemas/
│   │       └── visitor.schema.ts
│   │
│   ├── ai-insights/
│   │   ├── ai-insights.controller.ts
│   │   ├── ai-insights.service.ts
│   │   ├── ai-insights.module.ts
│   │   └── dto/
│   │       └── ai-analysis.dto.ts
│   │
│   ├── common/
│   │   ├── decorators/
│   │   │   ├── roles.decorator.ts
│   │   │   └── public.decorator.ts
│   │   ├── filters/
│   │   │   └── http-exception.filter.ts
│   │   ├── interceptors/
│   │   │   ├── logging.interceptor.ts
│   │   │   └── transform.interceptor.ts
│   │   ├── middleware/
│   │   │   └── rate-limit.middleware.ts
│   │   └── pipes/
│   │       └── validation.pipe.ts
│   │
│   ├── config/
│   │   ├── configuration.ts
│   │   ├── database.config.ts
│   │   ├── jwt.config.ts
│   │   └── swagger.config.ts
│   │
│   ├── app.module.ts
│   └── main.ts
│
├── test/
├── .env
├── .env.example
├── .gitignore
├── nest-cli.json
├── package.json
├── tsconfig.json
├── vercel.json
└── README.md
🔧 Configuración de Módulos
1. Main.ts - Punto de entrada
typescript// Configuración principal con Swagger
- CORS configurado para el frontend
- Swagger UI en /api/docs
- Validación global con class-validator
- Rate limiting para protección
- Helmet para seguridad
2. App Module - Módulo raíz
typescript@Module({
  imports: [
    ConfigModule.forRoot(),
    MongooseModule.forRoot(),
    AuthModule,
    UsersModule,
    ProjectsModule,
    ReviewsModule,
    SkillsModule,
    AnalyticsModule,
    AiInsightsModule,
    ThrottlerModule // Rate limiting
  ]
})
📊 Schemas de MongoDB
User Schema
typescript{
  email: string (unique),
  password: string (hashed),
  name: string,
  role: enum ['visitor', 'admin'],
  avatar?: string,
  bio?: string,
  linkedin?: string,
  github?: string,
  reviews: Review[],
  createdAt: Date,
  updatedAt: Date
}
Project Schema
typescript{
  title: string,
  description: string,
  longDescription: string,
  technologies: string[],
  images: string[], // URLs de Cloudinary
  videos?: string[], // URLs de Cloudinary
  githubUrl?: string,
  liveUrl?: string,
  category: enum ['web', 'mobile', 'ai', 'backend'],
  featured: boolean,
  aiGenerated: {
    percentage: number,
    tools: string[],
    description: string
  },
  stats: {
    views: number,
    likes: number
  },
  createdAt: Date,
  updatedAt: Date
}
Review Schema
typescript{
  user: ObjectId (ref: User),
  rating: number (1-5),
  comment: string,
  isPublic: boolean,
  createdAt: Date
}
Skill Schema
typescript{
  name: string,
  category: enum ['frontend', 'backend', 'tools', 'ai'],
  level: number (1-100),
  icon: string,
  yearsExperience: number
}
🔐 Autenticación y Seguridad
JWT Strategy

Access Token: 15 minutos
Refresh Token: 7 días
Roles: Admin, Visitor

Guards Implementados

JwtAuthGuard: Protege rutas privadas
RolesGuard: Control de acceso por roles
PublicDecorator: Marca rutas públicas

📡 Endpoints API
Auth

POST /auth/register - Registro público
POST /auth/login - Login
POST /auth/refresh - Refresh token
POST /auth/logout - Logout

Projects

GET /projects - Lista pública
GET /projects/:id - Detalle público
POST /projects - Crear (Admin)
PUT /projects/:id - Actualizar (Admin)
DELETE /projects/:id - Eliminar (Admin)

Reviews

GET /reviews - Lista pública
POST /reviews - Crear (Auth required)
DELETE /reviews/:id - Eliminar (Owner/Admin)

Analytics

POST /analytics/visit - Registrar visita
GET /analytics/stats - Estadísticas (Admin)

AI Insights

GET /ai-insights/project-analysis - Análisis de proyecto con IA
POST /ai-insights/code-review - Review de código con IA

🚀 Configuración para Vercel
vercel.json
json{
  "version": 2,
  "builds": [
    {
      "src": "dist/main.js",
      "use": "@vercel/node"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "dist/main.js"
    }
  ],
  "env": {
    "NODE_ENV": "production"
  }
}
🔧 Variables de Entorno
env# Database
MONGODB_URI=mongodb+srv://...

# JWT
JWT_SECRET=your-secret-key
JWT_REFRESH_SECRET=your-refresh-secret

# Configs
PORT=3001
NODE_ENV=production

# CORS
FRONTEND_URL=https://your-portfolio.vercel.app

# AI Integration (opcional)
OPENAI_API_KEY=your-api-key

# Rate Limiting
THROTTLE_TTL=60
THROTTLE_LIMIT=10
📦 Dependencias Principales
json{
  "@nestjs/core": "^10.0.0",
  "@nestjs/mongoose": "^10.0.0",
  "@nestjs/jwt": "^10.0.0",
  "@nestjs/passport": "^10.0.0",
  "@nestjs/swagger": "^7.0.0",
  "mongoose": "^7.0.0",
  "bcrypt": "^5.0.0",
  "class-validator": "^0.14.0",
  "class-transformer": "^0.5.0",
  "helmet": "^7.0.0",
  "@nestjs/throttler": "^5.0.0"
}
🎯 Features Especiales con IA
1. AI Code Analysis

Endpoint que analiza el código de los proyectos
Muestra qué porcentaje fue generado con IA
Identifica patrones y mejores prácticas

2. AI-Powered Reviews

Sugerencias automáticas de mejora
Análisis de sentimiento en reviews

3. Smart Analytics

Predicciones de tráfico
Análisis de comportamiento de usuarios

📝 Scripts NPM
json{
  "start:dev": "nest start --watch",
  "build": "nest build",
  "start:prod": "node dist/main",
  "test": "jest",
  "test:e2e": "jest --config ./test/jest-e2e.json",
  "lint": "eslint \"{src,apps,libs,test}/**/*.ts\"",
  "format": "prettier --write \"src/**/*.ts\""
}
🔄 CI/CD Pipeline
GitHub Actions
yamlname: Deploy to Vercel
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - run: npm ci
      - run: npm run build
      - run: npm test
      - uses: amondnet/vercel-action@v20
📊 Monitoreo y Logs

Winston Logger: Para logs estructurados
Sentry: Para tracking de errores
MongoDB Atlas: Monitoring de base de datos
Vercel Analytics: Para métricas de deployment

🎯 Propuesta de Fases:

FASE 1: Configuración Base 🏗️

= Configurar variables de entorno
= Conectar MongoDB
- Configurar Swagger
- Setup básico de seguridad (CORS, Helmet)

FASE 2: Autenticación 🔐

User Schema
- Auth Module (Register/Login/Refresh)
- JWT Strategy & Guards
- Roles Decorator

FASE 3: Módulos Core 📦

- Projects Module (CRUD completo)
- Skills Module
- Reviews Module

FASE 4: Features Avanzadas 🚀
- Analytics Module
- AI Insights Module
- Interceptors y Filters

FASE 5: Testing & Deploy 🎉

- Tests E2E
- Configuración Vercel
- CI/CD con GitHub Actions
- Documentación final